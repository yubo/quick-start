version: "3"

networks:
  monitoring:
    driver: bridge
  es:
    external:
      name: elasticsearch_default

volumes:
  prometheus_data: {}

services:
  ## for test
  term:
    image: ubuntu:latest
    container_name: demo2
    stdin_open: true
    tty: true  
    networks:
      - monitoring
      - es
  
  # apps
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - monitoring

  #demo-client:
  #  build:
  #    dockerfile: Dockerfile
  #    context: ./client
  #  environment:
  #    - OTEL_EXPORTER_OTLP_ENDPOINT=otel-agent:4317
  #    - DEMO_SERVER_ENDPOINT=http://demo-server:7080/hello
  #  #depends_on:
  #  #  - demo-server
  #  #  - otel-agent
  #  networks:
  #    - monitoring

  #demo-server:
  #  build:
  #    dockerfile: Dockerfile
  #    context: ./server
  #  environment:
  #    - OTEL_EXPORTER_OTLP_ENDPOINT=otel-agent:4317
  #  ports:
  #    - "7080"
  #  #depends_on:
  #  #  - otel-agent
  #  networks:
  #    - monitoring

  # Collector - agent
  otel-agent:
    image: "otel/opentelemetry-collector-contrib:0.46.0"
    command: ["--config=/etc/otel-collector-config.yaml", "${OTELCOL_ARGS}"]
    volumes:
      - ./agent/config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317"        # OTLP gRPC receiver
    networks:
      - monitoring

  # gateway
  otel-gateway:
    image: "otel/opentelemetry-collector-contrib:0.46.0"
    #image: "opentelemetry-collector-custom"
    #build:
    #  dockerfile: Dockerfile
    #  context: ./gateway
    command: ["--config=/etc/otel-collector-config.yaml", "${OTELCOL_ARGS}"]
    volumes:
      - ./gateway/config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317"        # OTLP gRPC receiver
    environment:
       - ES_ENDPOINT=http://es01:9200
       - ES_INDEX=test
       - ES_USER=test
       - ES_PASSWORD=test
    #depends_on:
    #  - jaeger-all-in-one
    #  - elasticsearch
    #  - prometheus
    networks:
      - monitoring
      - es


  ###### backend services
  #prometheus:
  #  image: prom/prometheus:latest
  #  #container_name: prometheus
  #  restart: unless-stopped
  #  volumes:
  #    - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #    - prometheus_data:/prometheus
  #  command:
  #    - '--config.file=/etc/prometheus/prometheus.yml'
  #    - '--storage.tsdb.path=/prometheus'
  #    - '--web.console.libraries=/etc/prometheus/console_libraries'
  #    - '--web.console.templates=/etc/prometheus/consoles'
  #    - '--web.enable-lifecycle'
  #  ports:
  #    - "9090:9090"
  #  networks:
  #    - monitoring

  #grafana:
  #  image: grafana/grafana:latest
  #  volumes:
  #    #- ./grafana.ini:/etc/grafana/grafana.ini
  #    - ./grafana/grafana-datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
  #  environment:
  #    - PROM_ENDPOINT=http://prometheus:9090
  #  ports:
  #    - 3000:3000
  #  depends_on:
  #    - prometheus
  #  networks:
  #    - monitoring

  ## Jaeger
  #jaeger-all-in-one:
  #  image: jaegertracing/all-in-one:latest
  #  ports:
  #    - "16686:16686"
  #    - "14268"
  #    - "14250"
  #  networks:
  #    - monitoring
